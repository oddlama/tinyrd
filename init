#!/bin/sh

export PATH="/bin"

# Defaults for variables which will be added when the initramfs
# is generated (mostly build-time command line arguments)
MODULES="${MODULES-}"


################################################################
# Utility functions

# A function to print a slightly emphasized status message
status() { echo "[1m[+] $*[m"; echo "<6>tinyrd: $*" > /dev/kmsg; }

# This function starts an interactive shell.
# If any arguments are given, they indicate an error message
# that is printed before the shell is opened.
interactive_shell() {
	[ $# -gt 0 ] \
		&& echo "[1;31merror:[m $*" >&2

	echo "[1;33mEntering interactive shell.[m" >&2
	echo "[1;33mPress Ctrl-D to continue.[m" >&2
	sh
}

# This function is used anywhere a block device should
# be accepted in the kernel command line, which allows
# the user to specify block devices either using their
# full path, or a property related to the device.
# Currently, file system LABEL and UUID are supported.
parse_device_spec() {
	case "$1" in
		LABEL=*) findfs "$1" ;;
		UUID=*) findfs "$1";;
		/dev/*) echo "$1" ;;
		*) ;;
	esac
}


################################################################
# Initial setup

# Mount virtual file systems proc and sys, so
# that we can load modules and properly start processes.
status "Mounting special file systems"
mount -t proc none /proc \
	|| interactive_shell "Could not mount /proc special file system"
mount -t sysfs none /sys \
	|| interactive_shell "Could not mount /sys special file system"
mount -t devtmpfs none /dev \
	|| interactive_shell "Could not mount /dev special file system"

# If a keymap was provided, load it now.
if [ -e /keyboard.kmap ]; then
	status "Loading keymap"
	loadkmap < /keyboard.kmap \
		|| interactive_shell "Failed to load keyboard map"
fi

# Load any modules that were included in the initramfs.
if [ -n "$MODULES" ]; then
	status "Loading kernel modules"
	rest="$MODULES,"
	while true; do
		module="${rest%%,*}"
		[ -z "$module" ] && break
		rest="${rest#*,}"
		echo "loading module $module ..."
		modprobe "$module" \
			|| interactive_shell "Failed to load module $module"
	done
fi


################################################################
# Parse the kernel command line

root_mount_opts="noatime"

status "Parsing commandline"
# shellcheck disable=SC2013
for param in $(cat /proc/cmdline); do
	case "$param" in
		ro) root_ro=true ;;
		root=*) root="$(parse_device_spec "${param#root=}")" ;;
		overlay=*) overlay="$(parse_device_spec "${param#overlay=}")" ;;
		*) ;;
	esac
done

# Mount root read-only if desired, or if we are using an overlayfs
[ -n "$overlay" ] && root_ro=true
[ "$root_ro" = true ] && root_mount_opts="$root_mount_opts,ro"


################################################################
# Mount the root file system

status "Mounting root device"
[ -b "${root-}" ] \
	|| interactive_shell "Missing or empty root= parameter"
mkdir -m700 /sysroot \
	|| interactive_shell "Could not create /sysroot"
# shellcheck disable=SC2086
mount -o $root_mount_opts "$root" /sysroot \
	|| interactive_shell "Could not mount root device '$root' to /sysroot"


################################################################
# If desired, mount a overlayfs over the root file system

if [ -n "$overlay" ]; then
	status "Mounting overlay"
	[ -b "${root-}" ] \
		|| interactive_shell "Missing or empty overlay= parameter"

	mkdir -m755 /overlay \
		|| interactive_shell "Could not create /overlay"
	mount "$overlay" /overlay \
		|| interactive_shell "Could not mount overlay device '$overlay' to /overlay"

	[ -e /overlay/data ] || mkdir /overlay/data \
		|| interactive_shell "Could not create /overlay/data"
	[ -e /overlay/work ] || mkdir /overlay/work \
		|| interactive_shell "Could not create /overlay/work"

	chmod 755 /overlay/data /overlay/work \
		|| interactive_shell "Could not make /overlay/{data,work} directories accessible"
	mount -t overlay -o noatime,lowerdir=/sysroot,upperdir=/overlay/data,workdir=/overlay/work overlay /sysroot \
		|| interactive_shell "Could not mount overlayfs over /sysroot"
fi


################################################################
# Switch into the new root

status "Switching root to real system"
umount /dev /proc /sys
exec switch_root /sysroot /sbin/init \
	|| interactive_shell "Could not switch root to /sysroot and execute /sbin/init"
