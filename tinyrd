#!/bin/bash

set -uo pipefail
umask 022

function die() {
	echo "[1;31merror:[m $*" >&2
	exit 1
}

function die_usage() {
	echo "usage: tinyrd [--force|-f] [--keymap <keymap>] [--kernel-version <kernel_version>] [--modules <MODULES,MODULE2,...>] [--compress <none,zstd,gzip>] <output_img>" >&2
	exit 1
}

COMPRESSION_ALGORITHM=none
KEYMAP=de-latin1-nodeadkeys
KERNEL_VERSION="$(uname -r)"
RAW_MODULES=""
MODULES=()
OUTPUT=""
OVERWRITE_OUTPUT=false

function parse_args() {
	function parse_output() {
		[[ -z "$OUTPUT" ]] \
			|| die "too many extra arguments"
		OUTPUT="$(realpath "$1")"
	}

	local arg
	local accept_opts=true
	while (($#)); do
		if [[ "$accept_opts" == "true" ]]; then
			arg="$1"; shift
			case "$arg" in
				'--help'|'-h') die_usage ;;
				'--compress') COMPRESSION_ALGORITHM="$1"; shift ;;
				'--keymap') KEYMAP="$1"; shift ;;
				'--kernel-version') KERNEL_VERSION="$1"; shift ;;
				'--modules') RAW_MODULES="$1"; IFS=, read -r -a MODULES <<< "$1"; shift ;;
				'--force'|'-f') OVERWRITE_OUTPUT=true ;;
				'--') accept_opts=false ;;
				'--'*) die "invalid argument $arg" ;;
				*) parse_output "$arg"; shift ;;
			esac
		else
			parse_output "$1"; shift
		fi
	done
}

parse_args "$@"
[[ -n "$OUTPUT" ]] || die_usage
[[ -e "$OUTPUT" && "$OVERWRITE_OUTPUT" != "true" ]] \
	&& die "Refusing to overwrite existing file $OUTPUT. Use --force to allow overwriting."

function status() {
	echo "[1;33m[+] $*[m"
}

function compress() {
	case "$COMPRESSION_ALGORITHM" in
		gzip) gzip --best > "$1" ;;
		zstd) zstd -q -f -o "$1" ;;
		*) die "Unsupported compression algorithm: $COMPRESSION_ALGORITHM" ;;
	esac
}

TMPDIR=$(mktemp -d) \
	|| die "Could not create temporary directory"
trap 'rm -rf -- "$TMPDIR"' EXIT

status "Creating base directory tree"
INITRAMFS="$TMPDIR/initramfs"
mkdir -p "$INITRAMFS/"{bin,dev,proc,sys} \
	|| die "Could not create base directories"

status "Cloning busybox"
git clone --depth 1 https://git.busybox.net/busybox/ "$TMPDIR/busybox" \
	|| die "Could not clone busybox"

status "Compiling busybox"
cp busybox.config "$TMPDIR/busybox/.config"
( cd "$TMPDIR/busybox" && make ) \
	|| die "Could not compile busybox"

status "Installing busybox in initramfs"
cp "$TMPDIR/busybox/busybox" "$INITRAMFS/bin/busybox"
for applet in $("$INITRAMFS/bin/busybox" --list); do
	ln -s busybox "$INITRAMFS/bin/$applet"
done

status "Installing init script"
cat > "$INITRAMFS/init" << EOF \
	|| die "Could not append variables to init script"
#!/bin/sh

RAW_MODULES=${RAW_MODULES@Q}
EOF
tail -n +2 init >> "$INITRAMFS/init" \
	|| die "Could not copy init script"
chmod 755 "$INITRAMFS/init" \
	|| die "Could not chmod init script"

status "Adding keymap"
loadkeys -b "$KEYMAP" > "$INITRAMFS/keyboard.kmap" \
	|| die "Could not export binary keymap $KEYMAP"

status "Adding modules"
for module in "${MODULES[@]}"; do
	mpdeps=$(modprobe --set-version "$KERNEL_VERSION" --show-depends "$module") \
		|| die "Could not find module dependencies for module $module"
	readarray -t deps <<< "$mpdeps" \
		|| die "Could not read module dependencies into array"
	for ko in "${deps[@]}"; do
		ko="${ko#insmod }"
		ko="${ko% }"
		mkdir -p "$INITRAMFS/$(dirname "$ko")" \
			|| die "Could not create parent directories for $ko"
		cp -va "$ko" "$INITRAMFS/$ko" \
			|| die "Could not install $ko into initramfs"
	done
done

status "Packing initramfs image"
umask 077
(
	cd "$INITRAMFS"
	find . -print0 \
		| cpio --quiet --null --create --format=newc --owner=0:0 \
		| compress "$OUTPUT"
) || die "Could not pack initramfs"

size=$(stat -c %s "$OUTPUT" | numfmt --to=iec)
blocks=$(stat -c %b "$OUTPUT")
echo "size $size  blocks $blocks  $OUTPUT"
