#!/bin/bash

set -uo pipefail
umask 022


################################################################
# Utility functions

function die() { echo "[1;31merror:[m $*" >&2; exit 1; }
function die_usage() { echo "usage: tinyrd [--force|-f] [--keymap <keymap>] [--kernel-version <kernel_version>] [--modules <MODULES,MODULE2,...>] [--compress <none,zstd,gzip>] <output_img>" >&2; exit "$1"; }
function status() { echo "[1;33m[+] $*[m"; }

# This function is used to compress the resulting
# initramfs cpio archive (stdin), and should output
# the initramfs image to "$1".
function compress() {
	case "$COMPRESSION_ALGORITHM" in
		gzip) gzip --best > "$1" ;;
		zstd) zstd -q -f -o "$1" ;;
		*) die "Unsupported compression algorithm: $COMPRESSION_ALGORITHM" ;;
	esac
}


################################################################
# Default settings for the initramfs. Otherwise provided as
# command line arguments to this script

# Compress with zstd by default. While decompression will likely
# be faster than reading from disk when using an HDD, the initramfs
# is so small that it doesn't matter at all when using SSDs.
# Your milage may vary, but zstd is a modern and sane default.
COMPRESSION_ALGORITHM=zstd
# A keymap that will be loaded when the initramfs starts.
# Useful if you suddenly find yourself in an emergency shell.
KEYMAP=""
# If --modules is given, by default we will use the modules
# for the currently running kernel. Ignored if no modules are added.
KERNEL_VERSION="$(uname -r)"
# A comma separated list of modules to include and load in the initramfs
MODULES=""
# The output image for the initramfs
OUTPUT=""
# Whether to allow overwriting an existing image file.
OVERWRITE_OUTPUT=false


################################################################
# Command line parsing

# Parses the command line arguments
function parse_args() {
	function parse_output() {
		[[ -z "$OUTPUT" ]] \
			|| die "too many extra arguments"
		OUTPUT="$(realpath "$1")"
	}

	local arg
	local accept_opts=true
	while (($#)); do
		if [[ "$accept_opts" == "true" ]]; then
			arg="$1"; shift
			case "$arg" in
				'--help'|'-h') die_usage 0 ;;
				'--compress') COMPRESSION_ALGORITHM="$1"; shift ;;
				'--keymap') KEYMAP="$1"; shift ;;
				'--kernel-version') KERNEL_VERSION="$1"; shift ;;
				'--modules') MODULES="$1"; shift ;;
				'--force'|'-f') OVERWRITE_OUTPUT=true ;;
				'--') accept_opts=false ;;
				'--'*) die "invalid argument $arg" ;;
				*) parse_output "$arg"; ;;
			esac
		else
			parse_output "$1"; shift
		fi
	done
}

# Parse arguments and check that the mandatory
# output is given (and doesn't exists, if we should not overwrite).
parse_args "$@"
[[ -n "$OUTPUT" ]] || die_usage 1
[[ -e "$OUTPUT" && "$OVERWRITE_OUTPUT" != "true" ]] \
	&& die "Refusing to overwrite existing file $OUTPUT. Use --force to allow overwriting."


################################################################
# Initramfs creation

# This temporary directory will be removed on-exit,
# and is used to store the initramfs contents and
# transient files such as the busybox source.
TMPDIR=$(mktemp -d) \
	|| die "Could not create temporary directory"
trap 'rm -rf -- "$TMPDIR"' EXIT

# These directories will always be required in the
# initramfs, which is why we include them in the archive.
status "Creating base directory tree"
INITRAMFS="$TMPDIR/initramfs"
mkdir -p "$INITRAMFS/"{bin,dev,proc,sys} \
	|| die "Could not create base directories"

# Clone and compile busybox using the contributed configuration,
# which will only select commonly used tools and none of the
# nonsense stuff like printer support or debian-specific tools.
status "Cloning busybox"
git clone --depth 1 https://git.busybox.net/busybox/ "$TMPDIR/busybox" \
	|| die "Could not clone busybox"
status "Compiling busybox"
cp busybox.config "$TMPDIR/busybox/.config"
( cd "$TMPDIR/busybox" && make ) \
	|| die "Could not compile busybox"

# Copy busybox to the initramfs and create links
# for all included applets so they can be used in the init script.
status "Installing busybox in initramfs"
cp "$TMPDIR/busybox/busybox" "$INITRAMFS/bin/busybox"
for applet in $("$INITRAMFS/bin/busybox" --list); do
	ln -s busybox "$INITRAMFS/bin/$applet"
done

# Remove the first line (shebang) from the init script
# and replace it with the shebang and some dynamic variables
# that we want to pass to the initramfs (mainly which modules to load).
status "Installing init script"
cat > "$INITRAMFS/init" << EOF \
	|| die "Could not append variables to init script"
#!/bin/sh

MODULES=${MODULES@Q}
EOF
tail -n +2 init >> "$INITRAMFS/init" \
	|| die "Could not copy init script"
chmod 755 "$INITRAMFS/init" \
	|| die "Could not chmod init script"

# If a keymap was selected, include it in the initramfs.
if [[ -n "$KEYMAP" ]]; then
	status "Adding keymap"
	loadkeys -b "$KEYMAP" > "$INITRAMFS/keyboard.kmap" \
		|| die "Could not export binary keymap $KEYMAP"
fi

# If any modules are required, copy them and their dependencies
# over to the initramfs. Also include meta information so
# that modprobe may correctly load them in the initramfs.
if [[ -n "$MODULES" ]]; then
	status "Adding modules"
	IFS=, read -r -a MODULES_ARRAY <<< "$MODULES"
	for module in "${MODULES_ARRAY[@]}"; do
		mpdeps=$(modprobe --set-version "$KERNEL_VERSION" --show-depends "$module") \
			|| die "Could not find module dependencies for module $module"
		readarray -t deps <<< "$mpdeps" \
			|| die "Could not read module dependencies into array"
		for ko in "${deps[@]}"; do
			ko="${ko#insmod }"
			ko="${ko% }"
			mkdir -p "$INITRAMFS/$(dirname "$ko")" \
				|| die "Could not create parent directories for $ko"
			cp -va "$ko" "$INITRAMFS/$ko" \
				|| die "Could not install $ko into initramfs"
		done
	done

	mkdir -p "$INITRAMFS/lib/modules/$KERNEL_VERSION" \
		|| die "Could not create directory /lib/modules/$KERNEL_VERSION"
	cp -va "/lib/modules/$KERNEL_VERSION/modules."* "$INITRAMFS/lib/modules/$KERNEL_VERSION/" \
		|| die "Could not copy module meta information into initramfs"
fi

# Finally, pack the initramfs into a cpio archive
# and compress it if desired.
status "Packing initramfs image"
umask 077
(
	cd "$INITRAMFS"
	find . -print0 \
		| cpio --quiet --null --create --format=newc --owner=0:0 \
		| compress "$OUTPUT"
) || die "Could not pack initramfs"

# Print some stats.
size=$(stat -c %s "$OUTPUT" | numfmt --to=iec)
blocks=$(stat -c %b "$OUTPUT")
echo "size $size  blocks $blocks  $OUTPUT"
